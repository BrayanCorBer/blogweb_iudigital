<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>El Ábaco: La Primera Computadora de la Humanidad</title>
</head>
<body>
    <h1>Introducción a Git: Inicialización de un Repositorio, Creación de Branches y Conexión a un Repositorio Remoto</h1>

    <p>Git es una herramienta increíble para el control de versiones, ideal si quieres trabajar en proyectos personales o colaborar con otros desarrolladores. Si eres nuevo en Git, ¡no te preocupes! Hoy veremos algunos de los pasos básicos para comenzar, incluyendo cómo inicializar un repositorio local, cómo crear y trabajar con branches, y cómo conectar tu repositorio local a GitHub.</p>

    <h2>1. Inicialización del Repositorio Localmente</h2>

    <p>Lo primero que hacemos al empezar a usar Git es crear un repositorio (repo) local. Un repositorio es simplemente un lugar donde se guarda el historial de tu proyecto, incluyendo los cambios realizados a lo largo del tiempo.</p>

    <h3>Pasos para Inicializar un Repositorio Local:</h3>
    <ol>
        <li>Abre la terminal o línea de comandos en tu computadora.</li>
        <li>Navega hasta la carpeta donde quieres iniciar el proyecto.</li>
        <li>Ejecuta el siguiente comando:</li>
    </ol>

    <pre><code>git init</code></pre>

    <p>Esto convierte tu carpeta en un repositorio de Git. ¡Felicidades! Ya tienes tu repositorio listo para empezar a trabajar.</p>

    <h3>¿Qué Hace Este Comando?</h3>
    <p><code>git init</code> crea una carpeta oculta llamada <code>.git</code> donde Git guarda todo el historial de cambios que realices en tu proyecto. Aunque no veas esta carpeta a simple vista, ya está ahí manejando el control de versiones.</p>

    <h2>2. Creación de Branches (Ramas)</h2>

    <p>Los branches son una característica clave en Git. Te permiten trabajar en diferentes características o correcciones sin afectar el código principal. Piensa en los branches como una "copia" temporal de tu código donde puedes hacer cambios sin miedo a romper el proyecto completo.</p>

    <h3>Crear un Branch</h3>
    <p>Para crear una nueva rama, utiliza el siguiente comando:</p>

    <pre><code>git branch nombre-de-la-rama</code></pre>

    <p>Por ejemplo, si estás trabajando en una nueva funcionalidad llamada "login", podrías crear una rama llamada <code>feature-login</code>:</p>

    <pre><code>git branch feature-login</code></pre>

    <p>Esto no cambiará tu rama actual, solo creará una nueva. Para cambiarte a esta nueva rama, usa:</p>

    <pre><code>git checkout feature-login</code></pre>

    <p>Ahora estás en una nueva rama donde puedes hacer todos los cambios sin afectar el código principal (que normalmente se encuentra en la rama <code>main</code> o <code>master</code>).</p>

    <h3>¿Por Qué Usar Branches?</h3>

    <p>Los branches son útiles cuando:</p>
    <ul>
        <li>Quieres desarrollar una nueva funcionalidad sin afectar el código principal.</li>
        <li>Quieres experimentar con algo nuevo.</li>
        <li>Estás colaborando con otras personas y cada una trabaja en una parte del proyecto.</li>
    </ul>

    <p>Una vez que hayas terminado de trabajar en la rama, puedes fusionarla (<em>merge</em>) de nuevo a la rama principal. Aquí es donde el comando <code>git merge</code> entra en acción.</p>

    <h3>Haciendo Merge de un Branch</h3>

    <p>Cuando terminas de trabajar en una rama y estás listo para unir los cambios a <code>main</code>, primero asegúrate de estar en la rama principal:</p>

    <pre><code>git checkout main</code></pre>

    <p>Luego, ejecuta el siguiente comando para fusionar tu rama en <code>main</code>:</p>

    <pre><code>git merge feature-login</code></pre>

    <p>Git combinará los cambios de <code>feature-login</code> con los de <code>main</code>. Si no hay conflictos (diferencias entre los archivos que causan problemas), Git hará la fusión automáticamente. Si hay conflictos, Git te pedirá que los resuelvas manualmente.</p>

    <h2>3. Agregar un Repositorio Remoto</h2>

    <p>Ahora que tienes tu proyecto localmente bajo control con Git, es momento de conectarlo a un repositorio remoto en GitHub para poder compartir tu código con otros o simplemente tener una copia de seguridad en la nube.</p>

    <h3>Pasos para Conectar tu Repositorio Local a GitHub:</h3>
    <ol>
        <li>Crea un nuevo repositorio en GitHub (sin README ni archivos adicionales).</li>
        <li>En tu terminal, agrega el repositorio remoto con el siguiente comando:</li>
    </ol>

    <pre><code>git remote add origin https://github.com/tu-usuario/nombre-del-repositorio.git</code></pre>

    <p>Asegúrate de reemplazar <code>tu-usuario</code> con tu nombre de usuario de GitHub y <code>nombre-del-repositorio</code> con el nombre de tu nuevo repositorio.</p>

    <ol start="3">
        <li>Para asegurarte de que el repositorio remoto está correctamente conectado, puedes ejecutar:</li>
    </ol>

    <pre><code>git remote -v</code></pre>

    <p>Verás algo como esto:</p>

    <pre><code>origin  https://github.com/tu-usuario/nombre-del-repositorio.git (fetch)
origin  https://github.com/tu-usuario/nombre-del-repositorio.git (push)</code></pre>

    <ol start="4">
        <li>Finalmente, empuja (sube) tu proyecto local al repositorio remoto con el siguiente comando:</li>
    </ol>

    <pre><code>git push -u origin main</code></pre>

    <p>Esto subirá todos los archivos del branch <code>main</code> a GitHub.</p>

    <h2>Conclusión</h2>

    <p>¡Y eso es todo! Ahora has aprendido a inicializar un repositorio, a crear y trabajar con branches, y a conectar tu repositorio local a GitHub. Con estos conceptos básicos, puedes manejar tu código de manera eficiente y comenzar a colaborar con otros o simplemente mantener un buen historial de tus proyectos. Si algo no quedó claro, ¡no dudes en seguir practicando! ¡Git se vuelve más fácil cuanto más lo usas!</p>


    <footer>
        <p>&copy; ChatGPT 4o mini</p>
    </footer>
</body>
</html>
